Metadata-Version: 2.1
Name: FanPulse
Version: 1.0.0
Summary: API for managing teams, players, matches, competitions, and areas
Home-page: https://github.com/yourusername/fanpulse
Author: Ratnesh Dubey
Author-email: rd7.eng@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: Flask>=2.0
Requires-Dist: Flask-RESTful>=0.3.9
Requires-Dist: Flask-Cors>=3.1.1
Requires-Dist: requests>=2.25.1
Provides-Extra: dev
Requires-Dist: flake8; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Requires-Dist: black; extra == "dev"

# FanPulse API

FanPulse is a Backend-for-Frontend (BFF) API designed to manage and provide data related to teams, players, matches, competitions, and areas. It serves as the backbone for front-end applications, providing the necessary API endpoints to fetch and display the required data.

This project is built using **Flask**, **Flask-RESTful**, and **PostgreSQL**.

## Features

- Fetch a list of teams and their details.
- Fetch a list of players and their detailed statistics.
- Fetch and filter matches by various parameters.
- Manage competitions and areas, including their details.
- Supports CORS for frontend development.

## Table of Contents

1. [Installation](#installation)
2. [Running the Application](#running-the-application)
3. [API Endpoints](#api-endpoints)
4. [Environment Variables](#environment-variables)
5. [Testing](#testing)

---

## Installation

### Prerequisites

- **Python 3.9** or higher
- **PostgreSQL** (for database)
- **Virtualenv** (optional but recommended)

### Clone the Repository

```bash
git clone https://github.com/yourusername/fanpulse-bff.git
cd fanpulse-bff
```

### Set Up a Virtual Environment
It is recommended to use a virtual environment to isolate your project dependencies.

```bash
python3 -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

### Install Dependencies

```bash
pip install -r requirements.txt
```

---

## Running the Application

### Local Development

1. **Set up environment variables**:  
   Ensure you have the necessary environment variables in place. You can create a `.env` file in the root of the project if not already set.

2. **Run the Flask App**:  
   To start the Flask application locally, run the following command:

   ```bash
   flask run
   ```

   The application will be running on `http://127.0.0.1:5000/`.

---

### Docker Setup

1. **Build the Docker Image**:  
   To build the Docker image for the app, run the following command:

   ```bash
   docker build -t fanpulse-bff .
   ```

2. **Run the Docker Container**:  
   After building the Docker image, run the container using this command:

   ```bash
   docker run -p 5000:5000 fanpulse-bff
   ```

   The app will be accessible on `http://localhost:5000`.

---

## API Endpoints

Below are the available API endpoints for the application:

### /api/teams
- **GET**: Fetch a list of all teams.

### /api/teams/{id}
- **GET**: Fetch the details of a specific team by ID.

### /api/players
- **GET**: Fetch a list of all players.

### /api/players/{id}
- **GET**: Fetch the details of a specific player by ID.

### /api/matches
- **GET**: Fetch a list of matches with optional filters.  
   **Filters**:
   - `date`: Filter by match date.
   - `status`: Filter by match status (e.g., scheduled, live, completed).
   - `season`: Filter by season.
   - `team_name`: Filter by team name.

### /api/competitions
- **GET**: Fetch a list of all competitions.

### /api/areas
- **GET**: Fetch a list of all areas.

### /api/areas/{area_id}
- **GET**: Fetch the details of a specific area by `area_id`.

---

## Environment Variables

The following environment variables are required:

- **DATABASE_URL**: The PostgreSQL connection string (e.g., `postgresql://postgres:password@localhost:5432/fanpulse`).
- **FLASK_APP**: The Flask app entry point (default is `app.py`).
- **FLASK_ENV**: The environment for Flask (development, production, etc.).

### Example of setting environment variables in `.env`:

```bash
DATABASE_URL=postgresql://postgres:password@localhost:5432/fanpulse
FLASK_APP=app.py
FLASK_ENV=development
```

---

## Testing

Make sure to run tests before deploying or making changes to the codebase.

1. **Run Unit Tests**:  
   To run the unit tests, use the following command:

   ```bash
   pytest
   ```

   Ensure that your tests are well-covered to maintain application quality.
```
